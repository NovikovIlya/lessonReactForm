{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport * as React from 'react';\nimport { useExternRef } from './useExternRef';\nimport { warnOnce } from '../lib/warnOnce';\nimport { useEffectDev } from './useEffectDev';\nvar isDOMTypeElement = function isDOMTypeElement(element) {\n  return typeof element.type === 'string';\n};\nvar warn = warnOnce('usePatchChildrenRef');\nexport var usePatchChildrenRef = function usePatchChildrenRef(children) {\n  var childRef = /*#__PURE__*/React.isValidElement(children) && (isDOMTypeElement(children) ? children.ref : children.props.getRootRef);\n  var patchedRef = useExternRef(childRef);\n  useEffectDev(function () {\n    if (!patchedRef.current) {\n      warn('Кажется, в children передан компонент, который не поддерживает свойство getRootRef. Мы не можем получить ссылку на корневой dom-элемент этого компонента', 'error');\n    }\n  }, [children === null || children === void 0 ? void 0 : children.type, patchedRef]);\n  return [patchedRef, /*#__PURE__*/React.isValidElement(children) ? /*#__PURE__*/React.cloneElement(children, _defineProperty({}, isDOMTypeElement(children) ? 'ref' : 'getRootRef', patchedRef)) : children];\n};","map":{"version":3,"names":["React","useExternRef","warnOnce","useEffectDev","isDOMTypeElement","element","type","warn","usePatchChildrenRef","children","childRef","isValidElement","ref","props","getRootRef","patchedRef","current","cloneElement","_defineProperty"],"sources":["E:\\lessonReactForm\\mini-app\\node_modules\\@vkontakte\\vkui\\src\\hooks\\usePatchChildrenRef.ts"],"sourcesContent":["import * as React from 'react';\nimport { useExternRef } from './useExternRef';\nimport { warnOnce } from '../lib/warnOnce';\nimport { useEffectDev } from './useEffectDev';\n\ntype ChildrenElement<T> = React.ReactElement<{ getRootRef?: React.Ref<T> }>;\n\nconst isDOMTypeElement = (element: React.ReactElement): element is React.DOMElement<any, any> => {\n  return typeof element.type === 'string';\n};\n\nconst warn = warnOnce('usePatchChildrenRef');\n\nexport const usePatchChildrenRef = <T = HTMLElement>(\n  children?: ChildrenElement<T>,\n): [React.MutableRefObject<T | null>, ChildrenElement<T> | undefined] => {\n  const childRef =\n    React.isValidElement(children) &&\n    (isDOMTypeElement(children) ? (children.ref as React.Ref<T>) : children.props.getRootRef);\n  const patchedRef = useExternRef<T>(childRef);\n\n  useEffectDev(() => {\n    if (!patchedRef.current) {\n      warn(\n        'Кажется, в children передан компонент, который не поддерживает свойство getRootRef. Мы не можем получить ссылку на корневой dom-элемент этого компонента',\n        'error',\n      );\n    }\n  }, [children?.type, patchedRef]);\n\n  return [\n    patchedRef,\n    React.isValidElement(children)\n      ? React.cloneElement(children, {\n          [isDOMTypeElement(children) ? 'ref' : 'getRootRef']: patchedRef,\n        })\n      : children,\n  ];\n};\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,YAAY,QAAQ,gBAAgB;AAC7C,SAASC,QAAQ,QAAQ,iBAAiB;AAC1C,SAASC,YAAY,QAAQ,gBAAgB;AAI7C,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAIC,OAA2B,EAA4C;EAC/F,OAAO,OAAOA,OAAO,CAACC,IAAI,KAAK,QAAQ;AACzC,CAAC;AAED,IAAMC,IAAI,GAAGL,QAAQ,CAAC,qBAAqB,CAAC;AAE5C,OAAO,IAAMM,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAC9BC,QAA6B,EAC0C;EACvE,IAAMC,QAAQ,GACZ,aAAAV,KAAK,CAACW,cAAc,CAACF,QAAQ,CAAC,KAC7BL,gBAAgB,CAACK,QAAQ,CAAC,GAAIA,QAAQ,CAACG,GAAG,GAAoBH,QAAQ,CAACI,KAAK,CAACC,UAAU,CAAC;EAC3F,IAAMC,UAAU,GAAGd,YAAY,CAAIS,QAAQ,CAAC;EAE5CP,YAAY,CAAC,YAAM;IACjB,IAAI,CAACY,UAAU,CAACC,OAAO,EAAE;MACvBT,IAAI,CACF,0JAA0J,EAC1J,OAAO,CACR;IACH;EACF,CAAC,EAAE,CAACE,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEH,IAAI,EAAES,UAAU,CAAC,CAAC;EAEhC,OAAO,CACLA,UAAU,EACV,aAAAf,KAAK,CAACW,cAAc,CAACF,QAAQ,CAAC,gBAC1BT,KAAK,CAACiB,YAAY,CAACR,QAAQ,EAAAS,eAAA,KACxBd,gBAAgB,CAACK,QAAQ,CAAC,GAAG,KAAK,GAAG,YAAY,EAAGM,UAAU,EAC/D,GACFN,QAAQ,CACb;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}