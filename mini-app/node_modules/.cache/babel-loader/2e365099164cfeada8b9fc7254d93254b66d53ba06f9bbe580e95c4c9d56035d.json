{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"before\", \"after\", \"children\", \"mode\", \"textWrap\", \"expandable\", \"className\"];\nimport * as React from 'react';\nimport { classNames, hasReactNode } from '@vkontakte/vkjs';\nimport { Paragraph } from '../Typography/Paragraph/Paragraph';\nimport { Tappable } from '../Tappable/Tappable';\nimport { Icon16Chevron } from '@vkontakte/icons';\n/**\n * @see https://vkcom.github.io/VKUI/#/MiniInfoCell\n */\nexport var MiniInfoCell = function MiniInfoCell(_ref) {\n  var before = _ref.before,\n    after = _ref.after,\n    children = _ref.children,\n    _ref$mode = _ref.mode,\n    mode = _ref$mode === void 0 ? 'base' : _ref$mode,\n    _ref$textWrap = _ref.textWrap,\n    textWrap = _ref$textWrap === void 0 ? 'nowrap' : _ref$textWrap,\n    _ref$expandable = _ref.expandable,\n    expandable = _ref$expandable === void 0 ? false : _ref$expandable,\n    className = _ref.className,\n    restProps = _objectWithoutProperties(_ref, _excluded);\n  var cellClasses = classNames(\"vkuiMiniInfoCell\", styles[\"MiniInfoCell--textWrap-\".concat(textWrap)], mode !== 'base' && styles[\"MiniInfoCell--mode-\".concat(mode)], className);\n  var cellContent = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"vkuiMiniInfoCell__before\"\n  }, before), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"vkuiMiniInfoCell__middle\"\n  }, /*#__PURE__*/React.createElement(Paragraph, {\n    className: \"vkuiMiniInfoCell__content\",\n    weight: mode === 'more' ? '2' : undefined\n  }, children), expandable && /*#__PURE__*/React.createElement(Icon16Chevron, null)), hasReactNode(after) && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"vkuiMiniInfoCell__after\"\n  }, after));\n  return restProps.onClick ? /*#__PURE__*/React.createElement(Tappable, _extends({\n    Component: \"div\",\n    role: \"button\"\n  }, restProps, {\n    className: cellClasses\n  }), cellContent) : /*#__PURE__*/React.createElement(\"div\", _extends({}, restProps, {\n    className: cellClasses\n  }), cellContent);\n};\nvar styles = {\n  \"MiniInfoCell--textWrap-short\": \"vkuiMiniInfoCell--textWrap-short\",\n  \"MiniInfoCell--textWrap-full\": \"vkuiMiniInfoCell--textWrap-full\",\n  \"MiniInfoCell--textWrap-nowrap\": \"vkuiMiniInfoCell--textWrap-nowrap\",\n  \"MiniInfoCell--mode-accent\": \"vkuiMiniInfoCell--mode-accent\",\n  \"MiniInfoCell--mode-add\": \"vkuiMiniInfoCell--mode-add\",\n  \"MiniInfoCell--mode-more\": \"vkuiMiniInfoCell--mode-more\"\n};","map":{"version":3,"names":["React","classNames","hasReactNode","Paragraph","Tappable","Icon16Chevron","MiniInfoCell","_ref","before","after","children","_ref$mode","mode","_ref$textWrap","textWrap","_ref$expandable","expandable","className","restProps","_objectWithoutProperties","_excluded","cellClasses","styles","concat","cellContent","createElement","Fragment","weight","undefined","onClick","_extends","Component","role"],"sources":["E:\\lessonReactForm\\mini-app\\node_modules\\@vkontakte\\vkui\\src\\components\\MiniInfoCell\\MiniInfoCell.tsx"],"sourcesContent":["import * as React from 'react';\nimport { classNames, hasReactNode } from '@vkontakte/vkjs';\nimport { Paragraph } from '../Typography/Paragraph/Paragraph';\nimport { Tappable } from '../Tappable/Tappable';\nimport { Icon16Chevron } from '@vkontakte/icons';\nimport styles from './MiniInfoCell.module.css';\n\nexport interface MiniInfoCellProps extends React.HTMLAttributes<HTMLDivElement> {\n  /**\n   * Иконка слева.<br />\n   * Рекомендуется использовать иконки размера 20.\n   */\n  before: React.ReactNode;\n\n  /**\n   * Содержимое справа.<br />\n   * `<UsersStack size=\"s\" />` или `<Avatar size={24} />`\n   */\n  after?: React.ReactNode;\n\n  /**\n   * Тип ячейки:\n   *\n   * - `base` – базовая ячейка с серой иконкой и серым текстом.<br />\n   * В компонент можно передать `Link`, чтобы визуально сделать часть текста ссылкой.\n   * - `add` – тип ячейки, который показывает, что взаимодействие с ней должно вызывать действие добавления чего-то.\n   * - `more` – взаимодействие с такой ячейкой должно открывать какую-то подробную информацию.\n   */\n  mode?: 'base' | 'accent' | 'add' | 'more';\n\n  /**\n   * Тип отображения текста:\n   *\n   * - `nowrap` – в одну строку, текст не переносится и обрезается.\n   * - `short` – максимально отображается 3 строки, остальное обрезается.\n   * - `full` – текст отображается полностью.\n   */\n  textWrap?: 'nowrap' | 'short' | 'full';\n\n  /**\n   * Передавать `true`, если предполагается переход при клике по ячейке.\n   */\n  expandable?: boolean;\n}\n\n/**\n * @see https://vkcom.github.io/VKUI/#/MiniInfoCell\n */\nexport const MiniInfoCell = ({\n  before,\n  after,\n  children,\n  mode = 'base',\n  textWrap = 'nowrap',\n  expandable = false,\n  className,\n  ...restProps\n}: MiniInfoCellProps) => {\n  const cellClasses = classNames(\n    styles['MiniInfoCell'],\n    styles[`MiniInfoCell--textWrap-${textWrap}`],\n    mode !== 'base' && styles[`MiniInfoCell--mode-${mode}`],\n    className,\n  );\n\n  const cellContent = (\n    <React.Fragment>\n      <span className={styles['MiniInfoCell__before']}>{before}</span>\n      <div className={styles['MiniInfoCell__middle']}>\n        <Paragraph\n          className={styles['MiniInfoCell__content']}\n          weight={mode === 'more' ? '2' : undefined}\n        >\n          {children}\n        </Paragraph>\n        {expandable && <Icon16Chevron />}\n      </div>\n      {hasReactNode(after) && <span className={styles['MiniInfoCell__after']}>{after}</span>}\n    </React.Fragment>\n  );\n\n  return restProps.onClick ? (\n    <Tappable Component=\"div\" role=\"button\" {...restProps} className={cellClasses}>\n      {cellContent}\n    </Tappable>\n  ) : (\n    <div {...restProps} className={cellClasses}>\n      {cellContent}\n    </div>\n  );\n};\n"],"mappings":";;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,UAAU,EAAEC,YAAY,QAAQ,iBAAiB;AAC1D,SAASC,SAAS,QAAQ,mCAAmC;AAC7D,SAASC,QAAQ,QAAQ,sBAAsB;AAC/C,SAASC,aAAa,QAAQ,kBAAkB;AAyChD;AACA;AACA;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAAC,IAAA,EASA;EAAA,IARvBC,MAAM,GAAAD,IAAA,CAANC,MAAM;IACNC,KAAK,GAAAF,IAAA,CAALE,KAAK;IACLC,QAAQ,GAAAH,IAAA,CAARG,QAAQ;IAAAC,SAAA,GAAAJ,IAAA,CACRK,IAAI;IAAJA,IAAI,GAAAD,SAAA,cAAG,MAAM,GAAAA,SAAA;IAAAE,aAAA,GAAAN,IAAA,CACbO,QAAQ;IAARA,QAAQ,GAAAD,aAAA,cAAG,QAAQ,GAAAA,aAAA;IAAAE,eAAA,GAAAR,IAAA,CACnBS,UAAU;IAAVA,UAAU,GAAAD,eAAA,cAAG,KAAK,GAAAA,eAAA;IAClBE,SAAS,GAAAV,IAAA,CAATU,SAAS;IACNC,SAAS,GAAAC,wBAAA,CAAAZ,IAAA,EAAAa,SAAA;EAEZ,IAAMC,WAAW,GAAGpB,UAAU,qBAE5BqB,MAAM,2BAAAC,MAAA,CAA2BT,QAAQ,EAAG,EAC5CF,IAAI,KAAK,MAAM,IAAIU,MAAM,uBAAAC,MAAA,CAAuBX,IAAI,EAAG,EACvDK,SAAS,CACV;EAED,IAAMO,WAAW,gBACfxB,KAAA,CAAAyB,aAAA,CAACzB,KAAK,CAAC0B,QAAQ,qBACb1B,KAAA,CAAAyB,aAAA;IAAMR,SAAS;EAAiC,GAAET,MAAM,CAAQ,eAChER,KAAA,CAAAyB,aAAA;IAAKR,SAAS;EAAiC,gBAC7CjB,KAAA,CAAAyB,aAAA,CAACtB,SAAS;IACRc,SAAS,6BAAkC;IAC3CU,MAAM,EAAEf,IAAI,KAAK,MAAM,GAAG,GAAG,GAAGgB;EAAU,GAEzClB,QAAQ,CACC,EACXM,UAAU,iBAAIhB,KAAA,CAAAyB,aAAA,CAACpB,aAAa,OAAG,CAC5B,EACLH,YAAY,CAACO,KAAK,CAAC,iBAAIT,KAAA,CAAAyB,aAAA;IAAMR,SAAS;EAAgC,GAAER,KAAK,CAAQ,CAEzF;EAED,OAAOS,SAAS,CAACW,OAAO,gBACtB7B,KAAA,CAAAyB,aAAA,CAACrB,QAAQ,EAAA0B,QAAA;IAACC,SAAS,EAAC,KAAK;IAACC,IAAI,EAAC;EAAQ,GAAKd,SAAS;IAAED,SAAS,EAAEI;EAAY,IAC3EG,WAAW,CACH,gBAEXxB,KAAA,CAAAyB,aAAA,QAAAK,QAAA,KAASZ,SAAS;IAAED,SAAS,EAAEI;EAAY,IACxCG,WAAW,CAEf;AACH,CAAC;AAAC,IAAAF,MAAA;EAAA;EAAA;EAAA;EAAA;EAAA;EAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}