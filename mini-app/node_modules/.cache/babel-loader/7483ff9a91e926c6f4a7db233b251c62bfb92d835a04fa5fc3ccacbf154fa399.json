{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport { useDOM } from '../lib/dom';\nimport { useGlobalEventListener } from './useGlobalEventListener';\n/**\n * Возвращает текущую ориентация экрана на человеческом языке.\n * Учитывает особенности API на разных платформах.\n */\nfunction getOrientation(window) {\n  var _window$screen$orient, _window$screen, _window$screen$orient2;\n  if (!window) {\n    return 'portrait';\n  }\n  var angle = Math.abs(\n  // eslint-disable-next-line compat/compat\n  (_window$screen$orient = (_window$screen = window.screen) === null || _window$screen === void 0 ? void 0 : (_window$screen$orient2 = _window$screen.orientation) === null || _window$screen$orient2 === void 0 ? void 0 : _window$screen$orient2.angle) !== null && _window$screen$orient !== void 0 ? _window$screen$orient : Number(window.orientation));\n  return angle === 90 ? 'landscape' : 'portrait';\n}\n\n/**\n * Возвращает текущую ориентация экрана на человеческом языке.\n * Обновляется при изменении ориентации.\n */\nexport function useOrientationChange() {\n  var _useDOM = useDOM(),\n    window = _useDOM.window;\n  var _React$useState = React.useState(function () {\n      return getOrientation(window);\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    orientation = _React$useState2[0],\n    setOrientation = _React$useState2[1];\n  useGlobalEventListener(window, 'orientationchange', function () {\n    return setOrientation(getOrientation(window));\n  });\n  return orientation;\n}","map":{"version":3,"names":["React","useDOM","useGlobalEventListener","getOrientation","window","_window$screen$orient","_window$screen","_window$screen$orient2","angle","Math","abs","screen","orientation","Number","useOrientationChange","_useDOM","_React$useState","useState","_React$useState2","_slicedToArray","setOrientation"],"sources":["E:\\lessonReactForm\\mini-app\\node_modules\\@vkontakte\\vkui\\src\\hooks\\useOrientationChange.ts"],"sourcesContent":["import * as React from 'react';\nimport { useDOM } from '../lib/dom';\nimport { useGlobalEventListener } from './useGlobalEventListener';\n\ntype Orientation = 'portrait' | 'landscape';\n\n/**\n * Возвращает текущую ориентация экрана на человеческом языке.\n * Учитывает особенности API на разных платформах.\n */\nfunction getOrientation(window: Window | undefined): Orientation {\n  if (!window) {\n    return 'portrait';\n  }\n\n  const angle = Math.abs(\n    // eslint-disable-next-line compat/compat\n    window.screen?.orientation?.angle ?? Number(window.orientation),\n  );\n\n  return angle === 90 ? 'landscape' : 'portrait';\n}\n\n/**\n * Возвращает текущую ориентация экрана на человеческом языке.\n * Обновляется при изменении ориентации.\n */\nexport function useOrientationChange(): Orientation {\n  const { window } = useDOM();\n\n  const [orientation, setOrientation] = React.useState(() => getOrientation(window));\n\n  useGlobalEventListener(window, 'orientationchange', () => setOrientation(getOrientation(window)));\n\n  return orientation;\n}\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,MAAM,QAAQ,YAAY;AACnC,SAASC,sBAAsB,QAAQ,0BAA0B;AAIjE;AACA;AACA;AACA;AACA,SAASC,cAAcA,CAACC,MAA0B,EAAe;EAAA,IAAAC,qBAAA,EAAAC,cAAA,EAAAC,sBAAA;EAC/D,IAAI,CAACH,MAAM,EAAE;IACX,OAAO,UAAU;EACnB;EAEA,IAAMI,KAAK,GAAGC,IAAI,CAACC,GAAG;EACpB;EAAA,CAAAL,qBAAA,IAAAC,cAAA,GACAF,MAAM,CAACO,MAAM,cAAAL,cAAA,wBAAAC,sBAAA,GAAbD,cAAA,CAAeM,WAAW,cAAAL,sBAAA,uBAA1BA,sBAAA,CAA4BC,KAAK,cAAAH,qBAAA,cAAAA,qBAAA,GAAIQ,MAAM,CAACT,MAAM,CAACQ,WAAW,CAAC,CAChE;EAED,OAAOJ,KAAK,KAAK,EAAE,GAAG,WAAW,GAAG,UAAU;AAChD;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASM,oBAAoBA,CAAA,EAAgB;EAClD,IAAAC,OAAA,GAAmBd,MAAM,EAAE;IAAnBG,MAAM,GAAAW,OAAA,CAANX,MAAM;EAEd,IAAAY,eAAA,GAAsChB,KAAK,CAACiB,QAAQ,CAAC;MAAA,OAAMd,cAAc,CAACC,MAAM,CAAC;IAAA,EAAC;IAAAc,gBAAA,GAAAC,cAAA,CAAAH,eAAA;IAA3EJ,WAAW,GAAAM,gBAAA;IAAEE,cAAc,GAAAF,gBAAA;EAElChB,sBAAsB,CAACE,MAAM,EAAE,mBAAmB,EAAE;IAAA,OAAMgB,cAAc,CAACjB,cAAc,CAACC,MAAM,CAAC,CAAC;EAAA,EAAC;EAEjG,OAAOQ,WAAW;AACpB"},"metadata":{},"sourceType":"module","externalDependencies":[]}