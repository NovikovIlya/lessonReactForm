{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from 'react';\nimport { getMillisecondsToTomorrow } from '../lib/date';\n\n/**\n * Опционально обновляемая дата сегодняшнего дня\n *\n * Дата - сегодня (в соответствии с системным временем)\n *\n * Часы, минуты, секунды, миллисекунды - произвольные\n *\n * @param listenDayChangesForUpdate - флаг по которому определяется, будет ли создаваться подписка на смену календарного дня\n */\nexport function useTodayDate() {\n  var listenDayChangesForUpdate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var _React$useState = React.useState(function () {\n      return new Date();\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    todayDate = _React$useState2[0],\n    setTodayDate = _React$useState2[1];\n  React.useEffect(function () {\n    if (!listenDayChangesForUpdate) {\n      return;\n    }\n    var timeToDayChange = getMillisecondsToTomorrow(todayDate);\n    var timeout = setTimeout(function () {\n      setTodayDate(new Date());\n    }, timeToDayChange);\n    return function () {\n      clearTimeout(timeout);\n    };\n  }, [listenDayChangesForUpdate, todayDate]);\n  return todayDate;\n}","map":{"version":3,"names":["React","getMillisecondsToTomorrow","useTodayDate","listenDayChangesForUpdate","arguments","length","undefined","_React$useState","useState","Date","_React$useState2","_slicedToArray","todayDate","setTodayDate","useEffect","timeToDayChange","timeout","setTimeout","clearTimeout"],"sources":["E:\\lessonReactForm\\mini-app\\node_modules\\@vkontakte\\vkui\\src\\hooks\\useTodayDate.ts"],"sourcesContent":["import React from 'react';\n\nimport { getMillisecondsToTomorrow } from '../lib/date';\n\n/**\n * Опционально обновляемая дата сегодняшнего дня\n *\n * Дата - сегодня (в соответствии с системным временем)\n *\n * Часы, минуты, секунды, миллисекунды - произвольные\n *\n * @param listenDayChangesForUpdate - флаг по которому определяется, будет ли создаваться подписка на смену календарного дня\n */\nexport function useTodayDate(listenDayChangesForUpdate = false) {\n  const [todayDate, setTodayDate] = React.useState(() => new Date());\n\n  React.useEffect(() => {\n    if (!listenDayChangesForUpdate) {\n      return;\n    }\n\n    const timeToDayChange = getMillisecondsToTomorrow(todayDate);\n\n    const timeout = setTimeout(() => {\n      setTodayDate(new Date());\n    }, timeToDayChange);\n\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, [listenDayChangesForUpdate, todayDate]);\n\n  return todayDate;\n}\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,yBAAyB,QAAQ,aAAa;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,YAAYA,CAAA,EAAoC;EAAA,IAAnCC,yBAAyB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;EAC5D,IAAAG,eAAA,GAAkCP,KAAK,CAACQ,QAAQ,CAAC;MAAA,OAAM,IAAIC,IAAI,EAAE;IAAA,EAAC;IAAAC,gBAAA,GAAAC,cAAA,CAAAJ,eAAA;IAA3DK,SAAS,GAAAF,gBAAA;IAAEG,YAAY,GAAAH,gBAAA;EAE9BV,KAAK,CAACc,SAAS,CAAC,YAAM;IACpB,IAAI,CAACX,yBAAyB,EAAE;MAC9B;IACF;IAEA,IAAMY,eAAe,GAAGd,yBAAyB,CAACW,SAAS,CAAC;IAE5D,IAAMI,OAAO,GAAGC,UAAU,CAAC,YAAM;MAC/BJ,YAAY,CAAC,IAAIJ,IAAI,EAAE,CAAC;IAC1B,CAAC,EAAEM,eAAe,CAAC;IAEnB,OAAO,YAAM;MACXG,YAAY,CAACF,OAAO,CAAC;IACvB,CAAC;EACH,CAAC,EAAE,CAACb,yBAAyB,EAAES,SAAS,CAAC,CAAC;EAE1C,OAAOA,SAAS;AAClB"},"metadata":{},"sourceType":"module","externalDependencies":[]}