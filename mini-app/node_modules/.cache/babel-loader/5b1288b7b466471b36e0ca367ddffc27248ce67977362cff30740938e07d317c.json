{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { escapeRegExp } from '../regexp';\nexport var Replacer = /*#__PURE__*/function () {\n  function Replacer(map) {\n    _classCallCheck(this, Replacer);\n    _defineProperty(this, \"regexp\", void 0);\n    _defineProperty(this, \"map\", void 0);\n    this.map = map;\n  }\n  _createClass(Replacer, [{\n    key: \"build\",\n    value: function build() {\n      if (this.regexp) {\n        return;\n      }\n      var groups = Object.keys(this.map).map(escapeRegExp).sort(function (a, b) {\n        return b.length - a.length;\n      });\n      var pattern = \"(?:\".concat(groups.join('|'), \")\");\n      this.regexp = new RegExp(pattern, 'g');\n    }\n  }, {\n    key: \"replace\",\n    value: function replace(string) {\n      var _this = this;\n      if (!string) {\n        return '';\n      }\n      this.build();\n      return string.replace(this.regexp, function (substring) {\n        return _this.map[substring];\n      });\n    }\n  }]);\n  return Replacer;\n}();","map":{"version":3,"names":["escapeRegExp","Replacer","map","_classCallCheck","_defineProperty","_createClass","key","value","build","regexp","groups","Object","keys","sort","a","b","length","pattern","concat","join","RegExp","replace","string","_this","substring"],"sources":["E:\\lessonReactForm\\mini-app\\node_modules\\@vkontakte\\vkjs\\src\\lib\\replacer.ts"],"sourcesContent":["import { escapeRegExp } from '../regexp';\n\nexport class Replacer {\n  private regexp: RegExp | undefined;\n  private map: Record<string, string>;\n\n  constructor(map: Record<string, string>) {\n    this.map = map;\n  }\n\n  private build() {\n    if (this.regexp) {\n      return;\n    }\n\n    const groups = Object.keys(this.map)\n      .map(escapeRegExp)\n      .sort((a, b) => b.length - a.length);\n    const pattern = `(?:${groups.join('|')})`;\n\n    this.regexp = new RegExp(pattern, 'g');\n  }\n\n  replace(string: string) {\n    if (!string) {\n      return '';\n    }\n\n    this.build();\n\n    return string.replace(this.regexp!, (substring) => this.map[substring]);\n  }\n}\n"],"mappings":";;;AAAA,SAASA,YAAY,QAAQ,WAAW;AAExC,WAAaC,QAAQ;EAInB,SAAAA,SAAYC,GAA2B,EAAE;IAAAC,eAAA,OAAAF,QAAA;IAAAG,eAAA;IAAAA,eAAA;IACvC,IAAI,CAACF,GAAG,GAAGA,GAAG;EAChB;EAACG,YAAA,CAAAJ,QAAA;IAAAK,GAAA;IAAAC,KAAA,EAED,SAAAC,MAAA,EAAgB;MACd,IAAI,IAAI,CAACC,MAAM,EAAE;QACf;MACF;MAEA,IAAMC,MAAM,GAAGC,MAAM,CAACC,IAAI,CAAC,IAAI,CAACV,GAAG,CAAC,CACjCA,GAAG,CAACF,YAAY,CAAC,CACjBa,IAAI,CAAC,UAACC,CAAC,EAAEC,CAAC;QAAA,OAAKA,CAAC,CAACC,MAAM,GAAGF,CAAC,CAACE,MAAM;MAAA,EAAC;MACtC,IAAMC,OAAO,SAAAC,MAAA,CAASR,MAAM,CAACS,IAAI,CAAC,GAAG,CAAC,MAAG;MAEzC,IAAI,CAACV,MAAM,GAAG,IAAIW,MAAM,CAACH,OAAO,EAAE,GAAG,CAAC;IACxC;EAAC;IAAAX,GAAA;IAAAC,KAAA,EAED,SAAAc,QAAQC,MAAc,EAAE;MAAA,IAAAC,KAAA;MACtB,IAAI,CAACD,MAAM,EAAE;QACX,OAAO,EAAE;MACX;MAEA,IAAI,CAACd,KAAK,EAAE;MAEZ,OAAOc,MAAM,CAACD,OAAO,CAAC,IAAI,CAACZ,MAAM,EAAG,UAACe,SAAS;QAAA,OAAKD,KAAI,CAACrB,GAAG,CAACsB,SAAS,CAAC;MAAA,EAAC;IACzE;EAAC;EAAA,OAAAvB,QAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}