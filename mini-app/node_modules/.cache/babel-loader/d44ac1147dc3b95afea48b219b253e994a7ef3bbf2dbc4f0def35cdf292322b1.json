{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport { uniqueArrayFallback } from './internal/uniqueArray';\n\n/**\n * Создаёт массив чисел требуемой длины\n *\n * @param arrayLength\n * @param startIndex\n */\nexport function createArray(arrayLength) {\n  var startIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  return new Array(arrayLength).fill(null).map(function (_, index) {\n    return startIndex + index;\n  });\n}\n\n/**\n * Вычисляет сумму элементов массива\n */\nexport function sumArray(array) {\n  if (!Array.isArray(array) || !array.length) {\n    return 0;\n  }\n  return array.reduce(function (previous, current) {\n    return current + previous;\n  });\n}\n\n/**\n * Находит среднее арифметическое элементов массива\n */\nexport function averageArray(array) {\n  if (!Array.isArray(array) || !array.length) {\n    return 0;\n  }\n  return sumArray(array) / array.length;\n}\n\n/**\n * Возвращает новый массив с уникальными элементами\n */\nexport function uniqueArray(array) {\n  if (!Array.isArray(array) || !array.length) {\n    return [];\n  }\n  if (typeof Set !== 'undefined') {\n    return Array.from(new Set(array));\n  }\n  return uniqueArrayFallback(array);\n}\n\n/**\n * Перемешивает исходный массив и возвращает новый\n */\nexport function shuffleArray(array) {\n  return array.map(function (a) {\n    return [Math.random(), a];\n  }).sort(function (a, b) {\n    return a[0] - b[0];\n  }).map(function (a) {\n    return a[1];\n  });\n}\n\n/**\n * Разбивает массив на чанки\n */\nexport function chunkArray(array, size) {\n  if (!Array.isArray(array) || !array.length) {\n    return [];\n  }\n  if (!size) {\n    return [array];\n  }\n  var head = array.slice(0, size);\n  var tail = array.slice(size);\n  return [head].concat(_toConsumableArray(chunkArray(tail, size)));\n}\n\n/**\n * Удаляет из массива элемент по значению.\n * Если элемент был удалён – возвращает новый массив.\n *\n * @example\n *\n * omitFromArray([1, 2, 3], 3) // [1, 2]\n * omitFromArray([1, 2, 3], 5) // [1, 2, 3]\n */\nexport function omitFromArray() {\n  var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var value = arguments.length > 1 ? arguments[1] : undefined;\n  var index = array.indexOf(value);\n  if (index < 0) {\n    return array;\n  } else {\n    return [].concat(_toConsumableArray(array.slice(0, index)), _toConsumableArray(array.slice(index + 1)));\n  }\n}\n\n/**\n * Возвращает разницу между двумя массивами.\n * Вернёт элементы, которых не хватает во втором массиве.\n *\n * @example\n *\n * difference([1, 2, 3], [1, 2, 3]) // []\n * difference([1, 2, 3], [1]) // [2, 3]\n * difference([1, 2, 3], [1, 10, 100]) // [2, 3]\n */\nexport function difference() {\n  var array1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var array2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return array1.reduce(function (res, item) {\n    if (array2.indexOf(item) < 0) {\n      res.push(item);\n    }\n    return res;\n  }, []);\n}","map":{"version":3,"names":["uniqueArrayFallback","createArray","arrayLength","startIndex","arguments","length","undefined","Array","fill","map","_","index","sumArray","array","isArray","reduce","previous","current","averageArray","uniqueArray","Set","from","shuffleArray","a","Math","random","sort","b","chunkArray","size","head","slice","tail","concat","_toConsumableArray","omitFromArray","value","indexOf","difference","array1","array2","res","item","push"],"sources":["E:\\lessonReactForm\\mini-app\\node_modules\\@vkontakte\\vkjs\\src\\arrays.ts"],"sourcesContent":["import { uniqueArrayFallback } from './internal/uniqueArray';\n\n/**\n * Создаёт массив чисел требуемой длины\n *\n * @param arrayLength\n * @param startIndex\n */\nexport function createArray(arrayLength: number, startIndex = 0): number[] {\n  return new Array(arrayLength).fill(null).map((_, index) => startIndex + index);\n}\n\n/**\n * Вычисляет сумму элементов массива\n */\nexport function sumArray(array: number[]): number {\n  if (!Array.isArray(array) || !array.length) {\n    return 0;\n  }\n  return array.reduce((previous, current) => current + previous);\n}\n\n/**\n * Находит среднее арифметическое элементов массива\n */\nexport function averageArray(array: number[]): number {\n  if (!Array.isArray(array) || !array.length) {\n    return 0;\n  }\n  return sumArray(array) / array.length;\n}\n\n/**\n * Возвращает новый массив с уникальными элементами\n */\nexport function uniqueArray<T>(array: T[]): T[] {\n  if (!Array.isArray(array) || !array.length) {\n    return [];\n  }\n\n  if (typeof Set !== 'undefined') {\n    return Array.from(new Set(array));\n  }\n\n  return uniqueArrayFallback(array);\n}\n\n/**\n * Перемешивает исходный массив и возвращает новый\n */\nexport function shuffleArray<T>(array: T[]): T[] {\n  return array\n    .map<[number, T]>((a) => [Math.random(), a])\n    .sort((a, b) => a[0] - b[0])\n    .map<T>((a) => a[1]);\n}\n\n/**\n * Разбивает массив на чанки\n */\nexport function chunkArray<T>(array: T[], size: number): T[][] {\n  if (!Array.isArray(array) || !array.length) {\n    return [];\n  }\n\n  if (!size) {\n    return [array];\n  }\n\n  const head = array.slice(0, size);\n  const tail = array.slice(size);\n\n  return [head, ...chunkArray(tail, size)];\n}\n\n/**\n * Удаляет из массива элемент по значению.\n * Если элемент был удалён – возвращает новый массив.\n *\n * @example\n *\n * omitFromArray([1, 2, 3], 3) // [1, 2]\n * omitFromArray([1, 2, 3], 5) // [1, 2, 3]\n */\nexport function omitFromArray<T>(array: T[] = [], value: T): T[] {\n  const index = array.indexOf(value);\n\n  if (index < 0) {\n    return array;\n  } else {\n    return [...array.slice(0, index), ...array.slice(index + 1)];\n  }\n}\n\n/**\n * Возвращает разницу между двумя массивами.\n * Вернёт элементы, которых не хватает во втором массиве.\n *\n * @example\n *\n * difference([1, 2, 3], [1, 2, 3]) // []\n * difference([1, 2, 3], [1]) // [2, 3]\n * difference([1, 2, 3], [1, 10, 100]) // [2, 3]\n */\nexport function difference<T>(array1: T[] = [], array2: T[] = []) {\n  return array1.reduce<T[]>((res, item) => {\n    if (array2.indexOf(item) < 0) {\n      res.push(item);\n    }\n    return res;\n  }, []);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}