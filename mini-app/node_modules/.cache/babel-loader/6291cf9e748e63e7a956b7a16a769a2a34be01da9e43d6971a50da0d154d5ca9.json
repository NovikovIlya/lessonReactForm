{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport { useDOM } from '../lib/dom';\nimport { useGlobalEventListener } from './useGlobalEventListener';\n/**\n Проверяет, закрыла ли клавиатура часть экрана, 24% подошло к большинству устройств\n Работает на iOS и Android, где софт-клавиатура ресайзит viewport в браузерах\n */\nexport function getPreciseKeyboardState(window) {\n  var innerHeight = window.innerHeight,\n    availHeight = window.screen.availHeight;\n  var coveredViewportPercentage = Math.round((1 - innerHeight / availHeight) * 100);\n  return coveredViewportPercentage > 24;\n}\nvar eventOptions = {\n  passive: true,\n  capture: false\n};\nexport function useKeyboard() {\n  var _document$activeEleme3;\n  var _useDOM = useDOM(),\n    document = _useDOM.document;\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    isOpened = _React$useState2[0],\n    setIsOpened = _React$useState2[1];\n  var onFocus = React.useCallback(function (event) {\n    var _document$activeEleme, _document$activeEleme2;\n    var isOpened = (event === true || event.type === 'focusin') && ((document === null || document === void 0 ? void 0 : (_document$activeEleme = document.activeElement) === null || _document$activeEleme === void 0 ? void 0 : _document$activeEleme.tagName) === 'INPUT' || (document === null || document === void 0 ? void 0 : (_document$activeEleme2 = document.activeElement) === null || _document$activeEleme2 === void 0 ? void 0 : _document$activeEleme2.tagName) === 'TEXTAREA');\n    setIsOpened(isOpened);\n  }, [document === null || document === void 0 ? void 0 : (_document$activeEleme3 = document.activeElement) === null || _document$activeEleme3 === void 0 ? void 0 : _document$activeEleme3.tagName]);\n\n  /**\n   У полей с autoFocus не отлавливаются события focus, для этого вызываем вручную,\n   чтобы иметь хоть какое-то понимание происходящего.\n   */\n  React.useEffect(function () {\n    onFocus(true);\n  }, [onFocus]);\n  useGlobalEventListener(document, 'focusout', onFocus, eventOptions);\n  useGlobalEventListener(document, 'focusin', onFocus, eventOptions);\n  return {\n    isOpened: isOpened\n  };\n}","map":{"version":3,"names":["React","useDOM","useGlobalEventListener","getPreciseKeyboardState","window","innerHeight","availHeight","screen","coveredViewportPercentage","Math","round","eventOptions","passive","capture","useKeyboard","_document$activeEleme3","_useDOM","document","_React$useState","useState","_React$useState2","_slicedToArray","isOpened","setIsOpened","onFocus","useCallback","event","_document$activeEleme","_document$activeEleme2","type","activeElement","tagName","useEffect"],"sources":["E:\\lessonReactForm\\mini-app\\node_modules\\@vkontakte\\vkui\\src\\hooks\\useKeyboard.ts"],"sourcesContent":["import * as React from 'react';\nimport { useDOM } from '../lib/dom';\nimport { useGlobalEventListener } from './useGlobalEventListener';\n\ninterface SoftwareKeyboardState {\n  isOpened: boolean;\n}\n\n/**\n Проверяет, закрыла ли клавиатура часть экрана, 24% подошло к большинству устройств\n Работает на iOS и Android, где софт-клавиатура ресайзит viewport в браузерах\n */\nexport function getPreciseKeyboardState(window: any): boolean {\n  const {\n    innerHeight,\n    screen: { availHeight },\n  } = window;\n\n  const coveredViewportPercentage = Math.round((1 - innerHeight / availHeight) * 100);\n  return coveredViewportPercentage > 24;\n}\n\nconst eventOptions = {\n  passive: true,\n  capture: false,\n};\n\nexport function useKeyboard(): SoftwareKeyboardState {\n  const { document } = useDOM();\n\n  const [isOpened, setIsOpened] = React.useState(false);\n\n  const onFocus = React.useCallback(\n    (event: FocusEvent | true) => {\n      const isOpened =\n        (event === true || event.type === 'focusin') &&\n        (document?.activeElement?.tagName === 'INPUT' ||\n          document?.activeElement?.tagName === 'TEXTAREA');\n      setIsOpened(isOpened);\n    },\n    [document?.activeElement?.tagName],\n  );\n\n  /**\n   У полей с autoFocus не отлавливаются события focus, для этого вызываем вручную,\n   чтобы иметь хоть какое-то понимание происходящего.\n   */\n  React.useEffect(() => {\n    onFocus(true);\n  }, [onFocus]);\n\n  useGlobalEventListener(document, 'focusout', onFocus, eventOptions);\n  useGlobalEventListener(document, 'focusin', onFocus, eventOptions);\n\n  return { isOpened };\n}\n"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,MAAM,QAAQ,YAAY;AACnC,SAASC,sBAAsB,QAAQ,0BAA0B;AAMjE;AACA;AACA;AACA;AACA,OAAO,SAASC,uBAAuBA,CAACC,MAAW,EAAW;EAC5D,IACEC,WAAW,GAETD,MAAM,CAFRC,WAAW;IACDC,WAAW,GACnBF,MAAM,CADRG,MAAM,CAAID,WAAW;EAGvB,IAAME,yBAAyB,GAAGC,IAAI,CAACC,KAAK,CAAC,CAAC,CAAC,GAAGL,WAAW,GAAGC,WAAW,IAAI,GAAG,CAAC;EACnF,OAAOE,yBAAyB,GAAG,EAAE;AACvC;AAEA,IAAMG,YAAY,GAAG;EACnBC,OAAO,EAAE,IAAI;EACbC,OAAO,EAAE;AACX,CAAC;AAED,OAAO,SAASC,WAAWA,CAAA,EAA0B;EAAA,IAAAC,sBAAA;EACnD,IAAAC,OAAA,GAAqBf,MAAM,EAAE;IAArBgB,QAAQ,GAAAD,OAAA,CAARC,QAAQ;EAEhB,IAAAC,eAAA,GAAgClB,KAAK,CAACmB,QAAQ,CAAC,KAAK,CAAC;IAAAC,gBAAA,GAAAC,cAAA,CAAAH,eAAA;IAA9CI,QAAQ,GAAAF,gBAAA;IAAEG,WAAW,GAAAH,gBAAA;EAE5B,IAAMI,OAAO,GAAGxB,KAAK,CAACyB,WAAW,CAC/B,UAACC,KAAwB,EAAK;IAAA,IAAAC,qBAAA,EAAAC,sBAAA;IAC5B,IAAMN,QAAQ,GACZ,CAACI,KAAK,KAAK,IAAI,IAAIA,KAAK,CAACG,IAAI,KAAK,SAAS,MAC1C,CAAAZ,QAAQ,aAARA,QAAQ,wBAAAU,qBAAA,GAARV,QAAQ,CAAEa,aAAa,cAAAH,qBAAA,uBAAvBA,qBAAA,CAAyBI,OAAO,MAAK,OAAO,IAC3C,CAAAd,QAAQ,aAARA,QAAQ,wBAAAW,sBAAA,GAARX,QAAQ,CAAEa,aAAa,cAAAF,sBAAA,uBAAvBA,sBAAA,CAAyBG,OAAO,MAAK,UAAU,CAAC;IACpDR,WAAW,CAACD,QAAQ,CAAC;EACvB,CAAC,EACD,CAACL,QAAQ,aAARA,QAAQ,wBAAAF,sBAAA,GAARE,QAAQ,CAAEa,aAAa,cAAAf,sBAAA,uBAAvBA,sBAAA,CAAyBgB,OAAO,CAAC,CACnC;;EAED;AACF;AACA;AACA;EACE/B,KAAK,CAACgC,SAAS,CAAC,YAAM;IACpBR,OAAO,CAAC,IAAI,CAAC;EACf,CAAC,EAAE,CAACA,OAAO,CAAC,CAAC;EAEbtB,sBAAsB,CAACe,QAAQ,EAAE,UAAU,EAAEO,OAAO,EAAEb,YAAY,CAAC;EACnET,sBAAsB,CAACe,QAAQ,EAAE,SAAS,EAAEO,OAAO,EAAEb,YAAY,CAAC;EAElE,OAAO;IAAEW,QAAQ,EAARA;EAAS,CAAC;AACrB"},"metadata":{},"sourceType":"module","externalDependencies":[]}