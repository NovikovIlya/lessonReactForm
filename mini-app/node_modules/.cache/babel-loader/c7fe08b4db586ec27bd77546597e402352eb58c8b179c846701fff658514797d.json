{"ast":null,"code":"import * as React from 'react';\nimport { hasHover as hasHoverLib } from '@vkontakte/vkjs';\nimport { AdaptivityContext } from '../components/AdaptivityProvider/AdaptivityContext';\nimport { useIsClient } from './useIsClient';\n\n/**\n * Определение происходит с помощью `window.matchMedia`. Для того, чтобы не было ошибок при гидратации, по умолчанию\n * откладываем определение на второй рендер.\n *\n * [No SSR] Если передать `false`, то определение будет сразу.\n */\n\nexport function useAdaptivityHasHover() {\n  var deferDetect = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  var _React$useContext = React.useContext(AdaptivityContext),\n    hasHoverContext = _React$useContext.hasHover;\n  var hasHover = hasHoverContext === undefined ? hasHoverLib : hasHoverContext;\n  var isClient = useIsClient(!deferDetect);\n  if (!isClient) {\n    return undefined;\n  }\n  return hasHover;\n}","map":{"version":3,"names":["React","hasHover","hasHoverLib","AdaptivityContext","useIsClient","useAdaptivityHasHover","deferDetect","arguments","length","undefined","_React$useContext","useContext","hasHoverContext","isClient"],"sources":["E:\\lessonReactForm\\mini-app\\node_modules\\@vkontakte\\vkui\\src\\hooks\\useAdaptivityHasHover.ts"],"sourcesContent":["import * as React from 'react';\nimport { hasHover as hasHoverLib } from '@vkontakte/vkjs';\nimport { AdaptivityContext } from '../components/AdaptivityProvider/AdaptivityContext';\nimport { useIsClient } from './useIsClient';\n\n/**\n * Определение происходит с помощью `window.matchMedia`. Для того, чтобы не было ошибок при гидратации, по умолчанию\n * откладываем определение на второй рендер.\n *\n * [No SSR] Если передать `false`, то определение будет сразу.\n */\nexport function useAdaptivityHasHover(deferDetect?: true): undefined | boolean;\nexport function useAdaptivityHasHover(deferDetect?: false): boolean;\nexport function useAdaptivityHasHover(deferDetect = true): undefined | boolean {\n  const { hasHover: hasHoverContext } = React.useContext(AdaptivityContext);\n  const hasHover = hasHoverContext === undefined ? hasHoverLib : hasHoverContext;\n\n  const isClient = useIsClient(!deferDetect);\n  if (!isClient) {\n    return undefined;\n  }\n\n  return hasHover;\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,QAAQ,IAAIC,WAAW,QAAQ,iBAAiB;AACzD,SAASC,iBAAiB,QAAQ,oDAAoD;AACtF,SAASC,WAAW,QAAQ,eAAe;;AAE3C;AACA;AACA;AACA;AACA;AACA;;AAGA,OAAO,SAASC,qBAAqBA,CAAA,EAA0C;EAAA,IAAzCC,WAAW,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EACtD,IAAAG,iBAAA,GAAsCV,KAAK,CAACW,UAAU,CAACR,iBAAiB,CAAC;IAAvDS,eAAe,GAAAF,iBAAA,CAAzBT,QAAQ;EAChB,IAAMA,QAAQ,GAAGW,eAAe,KAAKH,SAAS,GAAGP,WAAW,GAAGU,eAAe;EAE9E,IAAMC,QAAQ,GAAGT,WAAW,CAAC,CAACE,WAAW,CAAC;EAC1C,IAAI,CAACO,QAAQ,EAAE;IACb,OAAOJ,SAAS;EAClB;EAEA,OAAOR,QAAQ;AACjB"},"metadata":{},"sourceType":"module","externalDependencies":[]}